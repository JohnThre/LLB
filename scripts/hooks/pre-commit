#!/bin/bash
# Simplified pre-commit hook for LLB project
# Focuses on functionality over formatting

set -e  # Exit on any error

echo "🔍 Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in the project root
if [ ! -f "Makefile" ] || [ ! -d "backend" ] || [ ! -d "frontend" ]; then
    print_error "Must be run from project root directory"
    exit 1
fi

# 1. Check for large files
print_status "Checking for large files..."
large_files=$(find . -type f -size +50M -not -path "./.git/*" -not -path "./backend/llb-env/*" -not -path "./frontend/node_modules/*" -not -path "./ai/models/*" -not -path "./ai/cache/*" 2>/dev/null || true)
if [ -n "$large_files" ]; then
    print_warning "Very large files detected (>50MB):"
    echo "$large_files"
    print_warning "Consider using Git LFS for large files"
fi

# 2. Check for actual secrets (not just keywords)
print_status "Checking for actual secrets..."
# Look for actual secret patterns with values
sensitive_patterns="(password\s*=\s*['\"][^'\"]{8,}['\"]|secret\s*=\s*['\"][^'\"]{8,}['\"]|api_key\s*=\s*['\"][^'\"]{8,}['\"]|private_key\s*=\s*['\"][^'\"]{8,}['\"]|token\s*=\s*['\"][^'\"]{8,}['\"])"
staged_files=$(git diff --cached --name-only)
sensitive_files=""
for file in $staged_files; do
    # Skip common false positive files
    if [[ "$file" == *.baseline ]] || \
       [[ "$file" == *.yaml ]] || \
       [[ "$file" == *.yml ]] || \
       [[ "$file" == *pre-commit* ]] || \
       [[ "$file" == *test* ]] || \
       [[ "$file" == *spec* ]] || \
       [[ "$file" == *mock* ]] || \
       [[ "$file" == *example* ]]; then
        continue
    fi
    # Only check for actual secret values with reasonable length
    if grep -l -E "$sensitive_patterns" "$file" 2>/dev/null; then
        sensitive_files="$sensitive_files $file"
    fi
done
if [ -n "$sensitive_files" ]; then
    print_error "Potential secrets with actual values detected:"
    echo "$sensitive_files"
    print_error "Please review and remove any real secrets before committing"
    exit 1
fi

# 3. Backend tests
print_status "Running backend tests..."
cd backend

# Check if virtual environment exists
if [ ! -d "llb-env" ]; then
    print_error "Backend virtual environment not found. Run 'make setup' first."
    exit 1
fi

# Activate virtual environment and run tests
source llb-env/bin/activate
if ! python -m pytest tests/ --tb=short -q; then
    print_error "Backend tests failed"
    exit 1
fi

cd ..

# 4. Frontend tests
print_status "Running frontend tests..."
cd frontend

# Check if node_modules exists
if [ ! -d "node_modules" ]; then
    print_error "Frontend dependencies not installed. Run 'yarn install' first."
    exit 1
fi

# Run frontend tests
if ! yarn test --run --reporter=basic; then
    print_error "Frontend tests failed"
    exit 1
fi

cd ..

# 5. AI module tests (if they exist)
if [ -d "ai/tests" ] && [ -f "ai/tests/test_prompt_engine.py" ]; then
    print_status "Running AI module tests..."
    cd ai
    source ../backend/llb-env/bin/activate
    if ! python -m pytest tests/ --tb=short -q; then
        print_error "AI module tests failed"
        exit 1
    fi
    cd ..
fi

# 6. Final success message
print_success "All tests passed! 🎉"
print_success "Code formatting can be improved later with 'make format'"
print_success "Proceeding with commit..."

exit 0
