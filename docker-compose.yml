version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: llb_db
    environment:
      POSTGRES_DB: llb_db
      POSTGRES_USER: llb_user
      POSTGRES_PASSWORD: llb_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - llb_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: llb_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - llb_network
    restart: unless-stopped

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: llb_backend
    environment:
      - DATABASE_URL=postgresql://llb_user:llb_password@db:5432/llb_db
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - GEMMA_MODEL_PATH=/app/models/gemma-3-1b
      - WHISPER_MODEL_PATH=/app/models/whisper
    volumes:
      - ./ai/models:/app/models:ro
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - llb_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: llb_frontend
    environment:
      - REACT_APP_API_URL=http://localhost/api
      - REACT_APP_ENVIRONMENT=production
    volumes:
      - ./frontend/public:/app/public
    depends_on:
      - backend
    networks:
      - llb_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: llb_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./backend/static:/var/www/static:ro
    depends_on:
      - backend
      - frontend
    networks:
      - llb_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  llb_network:
    driver: bridge 