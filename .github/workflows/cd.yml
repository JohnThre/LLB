name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      nginx-image: ${{ steps.meta-nginx.outputs.tags }}
      version: ${{ steps.meta-backend.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Backend Image
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    # Frontend Image
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    # Nginx Image
    - name: Extract metadata for nginx
      id: meta-nginx
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Build and push nginx image
      uses: docker/build-push-action@v5
      with:
        context: ./docker/nginx
        file: ./docker/nginx/Dockerfile
        push: true
        tags: ${{ steps.meta-nginx.outputs.tags }}
        labels: ${{ steps.meta-nginx.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp docker-compose.yml deployment/
        cp -r docker deployment/
        
        # Create environment-specific docker-compose override
        cat > deployment/docker-compose.staging.yml << EOF
        version: '3.8'
        services:
          backend:
            image: ${{ needs.build-and-push.outputs.backend-image }}
            environment:
              - ENVIRONMENT=staging
              - DATABASE_URL=\${DATABASE_URL}
              - REDIS_URL=\${REDIS_URL}
              - SECRET_KEY=\${SECRET_KEY}
          
          frontend:
            image: ${{ needs.build-and-push.outputs.frontend-image }}
            environment:
              - REACT_APP_ENVIRONMENT=staging
              - REACT_APP_API_URL=\${REACT_APP_API_URL}
          
          nginx:
            image: ${{ needs.build-and-push.outputs.nginx-image }}
        EOF

    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/llb-staging
          
          # Pull latest images
          docker-compose -f docker-compose.yml -f docker-compose.staging.yml pull
          
          # Stop current services
          docker-compose -f docker-compose.yml -f docker-compose.staging.yml down
          
          # Start updated services
          docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d
          
          # Run database migrations
          docker-compose -f docker-compose.yml -f docker-compose.staging.yml exec -T backend alembic upgrade head
          
          # Health check
          sleep 30
          curl -f http://localhost/api/v1/health || exit 1

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create production deployment package
      run: |
        mkdir -p deployment
        cp docker-compose.yml deployment/
        cp -r docker deployment/
        
        # Create production docker-compose override
        cat > deployment/docker-compose.production.yml << EOF
        version: '3.8'
        services:
          backend:
            image: ${{ needs.build-and-push.outputs.backend-image }}
            environment:
              - ENVIRONMENT=production
              - DATABASE_URL=\${DATABASE_URL}
              - REDIS_URL=\${REDIS_URL}
              - SECRET_KEY=\${SECRET_KEY}
            deploy:
              replicas: 2
              resources:
                limits:
                  memory: 1G
                reservations:
                  memory: 512M
          
          frontend:
            image: ${{ needs.build-and-push.outputs.frontend-image }}
            environment:
              - REACT_APP_ENVIRONMENT=production
              - REACT_APP_API_URL=\${REACT_APP_API_URL}
            deploy:
              replicas: 2
              resources:
                limits:
                  memory: 512M
                reservations:
                  memory: 256M
          
          nginx:
            image: ${{ needs.build-and-push.outputs.nginx-image }}
            deploy:
              replicas: 1
              resources:
                limits:
                  memory: 256M
                reservations:
                  memory: 128M
        EOF

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/llb-production
          
          # Create backup with error handling
          BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
          if ! docker-compose -f docker-compose.yml -f docker-compose.production.yml exec -T db pg_dump -U ${POSTGRES_USER:-llb_user} ${POSTGRES_DB:-llb_db} > "$BACKUP_FILE"; then
            echo "Database backup failed. Aborting deployment."
            exit 1
          fi
          
          # Verify backup file is not empty
          if [ ! -s "$BACKUP_FILE" ]; then
            echo "Backup file is empty. Aborting deployment."
            exit 1
          fi
          
          echo "Database backup created successfully: $BACKUP_FILE"
          
          # Pull latest images
          docker-compose -f docker-compose.yml -f docker-compose.production.yml pull
          
          # Rolling update with zero downtime
          docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d --no-deps backend
          sleep 30
          docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d --no-deps frontend
          sleep 30
          docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d --no-deps nginx
          
          # Run database migrations
          docker-compose -f docker-compose.yml -f docker-compose.production.yml exec -T backend alembic upgrade head
          
          # Health check
          sleep 60
          curl -f https://llb.example.com/api/v1/health || exit 1

  # Security Scan of Images
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Run Trivy vulnerability scanner on backend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.backend-image }}
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Run Trivy vulnerability scanner on frontend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.frontend-image }}
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'backend-trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'frontend-trivy-results.sarif'

  # Notify Deployment
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          🚀 LLB Deployment Successful!
          Version: ${{ needs.build-and-push.outputs.version }}
          Environment: ${{ github.ref == 'refs/heads/main' && 'Staging' || 'Production' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ❌ LLB Deployment Failed!
          Version: ${{ needs.build-and-push.outputs.version }}
          Environment: ${{ github.ref == 'refs/heads/main' && 'Staging' || 'Production' }}
          Please check the logs for details.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 