openapi: 3.0.3
info:
  title: LLB API Documentation
  description: |
    API documentation for the LLB (Large Language Bot) application.
    This API provides endpoints for user management, chat functionality,
    and AI-powered features.
  version: 1.0.0
  contact:
    name: LLB Support
    email: support@llb.com

servers:
  - url: http://localhost:8000/api/v1
    description: Local development server
  - url: https://api.llb.com/v1
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        username:
          type: string
        role:
          type: string
          enum: [admin, moderator, user]
        email_verified:
          type: boolean
        two_factor_enabled:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - email
        - username
        - role

    Chat:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        is_private:
          type: boolean
        created_by:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        id:
          type: integer
          format: int64
        chat_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        content:
          type: string
        metadata:
          type: object
        tokens:
          type: integer
        language:
          type: string
        created_at:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                password:
                  type: string
                  format: password
              required:
                - email
                - username
                - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Login user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                    example: bearer
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me:
    get:
      summary: Get current user profile
      tags: [Users]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /chats:
    get:
      summary: List all chats
      tags: [Chats]
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of chats
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Chat'
                  total:
                    type: integer
                  page:
                    type: integer
                  per_page:
                    type: integer

    post:
      summary: Create a new chat
      tags: [Chats]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                is_private:
                  type: boolean
              required:
                - name
      responses:
        '201':
          description: Chat created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'

  /chats/{chat_id}/messages:
    get:
      summary: Get chat messages
      tags: [Messages]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: chat_id
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  total:
                    type: integer
                  page:
                    type: integer
                  per_page:
                    type: integer

    post:
      summary: Send a message
      tags: [Messages]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: chat_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /ai/classify:
    post:
      summary: Classify text using AI
      tags: [AI]
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                categories:
                  type: array
                  items:
                    type: string
              required:
                - text
                - categories
      responses:
        '200':
          description: Text classified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  category:
                    type: string
                  confidence:
                    type: number
                    format: float

  /ai/extract-entities:
    post:
      summary: Extract entities from text
      tags: [AI]
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                entity_types:
                  type: array
                  items:
                    type: string
              required:
                - text
      responses:
        '200':
          description: Entities extracted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  entities:
                    type: array
                    items:
                      type: object
                      properties:
                        text:
                          type: string
                        type:
                          type: string
                        confidence:
                          type: number
                          format: float

  /analytics/chat/{chat_id}:
    get:
      summary: Get chat analytics
      tags: [Analytics]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: chat_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Chat analytics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_messages:
                    type: integer
                  total_tokens:
                    type: integer
                  avg_message_length:
                    type: number
                    format: float
                  most_common_language:
                    type: string
                  last_activity:
                    type: string
                    format: date-time 